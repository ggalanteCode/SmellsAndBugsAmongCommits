package gui;

import database.DbHandler;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;

import java.time.LocalDate;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import models.IssueCollection;

import javax.swing.*;

import models.Commit;
import models.Project;
import org.eclipse.jgit.api.errors.GitAPIException;
import repository.RepositoryHandler;


/**
 * window used to browse commits and choose one from the list (can filter it)
 * @author mefi
 */
public class CommitPicker extends javax.swing.JFrame {
    private Project p;
    private ArrayList<Commit> commits;
    private RepositoryHandler rh;
    private ArrayList<IssueCollection> allIssueProject;
    private ArrayList<IssueCollection> bugInDb;
    //private ArrayList<IssueCollection> openBugProject;
    //private ArrayList<IssueCollection> closedBugProject;
    /**
    * create new form 
    * @param p project of interest
    * @see Project
    * @author mefi
    */
    public CommitPicker(Project p) {
        initComponents();
        setVisible(true);
        pack();
        setTitle("Sbac");
        filterB.setIcon(new ImageIcon(getClass().getResource("/images/filter.png")));
        goBack.setIcon(new ImageIcon(getClass().getResource("/images/back.png")));
        this.p=p;
        try {
            rh = new RepositoryHandler(p.getPath());
            this.rh.reset();
            rh.findAllCommits();
            this.fF1.setText(rh.getFirstCommit().getStringDate());
            this.fF2.setText(rh.getLastCommit().getStringDate());
            commits = new ArrayList<>();
            commits.addAll(rh.getBugFixerCommits());
            
            populate();
        } catch (IOException ex) {
            Logger.getLogger(CommitPicker.class.getName()).log(Level.SEVERE, null, ex);
        } catch (GitAPIException ex) {
            Logger.getLogger(CommitPicker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        commitList = new javax.swing.JList<>();
        filterB = new javax.swing.JLabel();
        analyzeB = new javax.swing.JButton();
        fF1 = new javax.swing.JTextField();
        fF2 = new javax.swing.JTextField();
        releaseB = new javax.swing.JButton();
        goBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        commitList.setBackground(new java.awt.Color(0, 0, 0));
        commitList.setForeground(new java.awt.Color(255, 255, 255));
        commitList.setSelectionBackground(new java.awt.Color(255, 255, 0));
        jScrollPane1.setViewportView(commitList);

        filterB.setBackground(new java.awt.Color(0, 0, 0));
        filterB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filterBMouseClicked(evt);
            }
        });

        analyzeB.setBackground(new java.awt.Color(0, 0, 0));
        analyzeB.setForeground(new java.awt.Color(255, 255, 255));
        analyzeB.setText("Analyze");
        analyzeB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeBActionPerformed(evt);
            }
        });

        fF1.setBackground(new java.awt.Color(0, 0, 0));
        fF1.setForeground(new java.awt.Color(255, 255, 255));
        fF1.setText("dd-mm-yyyy");
        fF1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fF1ActionPerformed(evt);
            }
        });

        fF2.setBackground(new java.awt.Color(0, 0, 0));
        fF2.setForeground(new java.awt.Color(255, 255, 255));
        fF2.setText("dd-mm-yyyy");
        fF2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fF2ActionPerformed(evt);
            }
        });

        releaseB.setBackground(new java.awt.Color(0, 0, 0));
        releaseB.setForeground(new java.awt.Color(255, 255, 255));
        releaseB.setText("Release");
        releaseB.setMaximumSize(new java.awt.Dimension(74, 32));
        releaseB.setMinimumSize(new java.awt.Dimension(74, 32));
        releaseB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseBActionPerformed(evt);
            }
        });

        goBack.setBorderPainted(false);
        goBack.setContentAreaFilled(false);
        goBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(goBack)
                .addGap(26, 26, 26))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fF1)
                            .addComponent(fF2, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                        .addGap(32, 32, 32)
                        .addComponent(filterB, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(releaseB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(analyzeB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fF1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fF2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(filterB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(releaseB, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeB, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(goBack)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filterBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterBMouseClicked
        if(fF1.getText().isEmpty() && fF2.getText().isEmpty())
                new Dialog("insert dates");
            else
                if(!(fF1.getText().isEmpty()) && fF2.getText().isEmpty()){
                    TreeSet<Commit> tmp= rh.getCommitForDate(Date.from(LocalDate.parse(fF1.getText(), DateTimeFormatter.ofPattern("dd-MM-yyyy")).atStartOfDay().toInstant(ZoneOffset.UTC)));
                    Commit[] list=new Commit[tmp.size()];
                    this.commitList.setListData(tmp.toArray(list));
                }else
                    if(!(fF2.getText().isEmpty()) && fF1.getText().isEmpty()){
                        TreeSet<Commit> tmp= rh.getCommitForDate(Date.from(LocalDate.parse(fF2.getText(), DateTimeFormatter.ofPattern("dd-MM-yyyy")).atStartOfDay().toInstant(ZoneOffset.UTC)));
                        Commit[] list=new Commit[tmp.size()];
                        this.commitList.setListData(tmp.toArray(list));
            
                    }else{
                        TreeSet<Commit> tmp= rh.getCommitsBetweenDates(Date.from(LocalDate.parse(fF1.getText(), DateTimeFormatter.ofPattern("dd-MM-yyyy")).atStartOfDay().toInstant(ZoneOffset.UTC)), Date.from(LocalDate.parse(fF2.getText(), DateTimeFormatter.ofPattern("dd-MM-yyyy")).atStartOfDay().toInstant(ZoneOffset.UTC)));
                        Commit[] list=new Commit[tmp.size()];
                        this.commitList.setListData(tmp.toArray(list));
                    }
        
    }//GEN-LAST:event_filterBMouseClicked

    private void analyzeBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeBActionPerformed

        //Aggiungere verifica esistenza file POM.xml, in caso contrario avvisare.

        String projectPath = rh.getLocalPath().toString() + File.separator;
        String [] possibleNamesBuildFile = {"POM.xml","pom.xml","Pom.xml"};
        File buildFile;
        int nTentativi = possibleNamesBuildFile.length;
        int test = 0;

        for (String name : possibleNamesBuildFile) {
            test++;
            buildFile = new File(projectPath + name);

            if (buildFile.exists()){
                break;
            } else if (test == nTentativi) {
                Adv dialog = new Adv("Build file not found. Coninue anyway?");
                if (!dialog.getDecision()) {
                    return;
                }
            }
        }

        try {

            //openBugProject=DbHandler.getAllBug(p.getUrl(),"open");
            //closedBugProject=DbHandler.getAllBug(p.getUrl(), "closed");
            bugInDb=DbHandler.getAllBug(p.getUrl());
            allIssueProject= rh.getAllIssue(bugInDb);
            if(allIssueProject!=null && !(allIssueProject.isEmpty()))
                DbHandler.insertBugComm(allIssueProject,p.getUrl());

            this.rh.checkoutCommit(commitList.getSelectedValue().getVersion());
        } catch (Exception ex) {
            Logger.getLogger(CommitPicker.class.getName()).log(Level.SEVERE, null, ex);
        }
        dispose();
        new Parameters(p,commitList.getSelectedValue().getVersion(), rh);
    }//GEN-LAST:event_analyzeBActionPerformed



    private void fF1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fF1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fF1ActionPerformed

    private void releaseBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseBActionPerformed
        TreeSet<Commit> tmp= rh.getRealeaseCommits();
        Commit[] list=new Commit[tmp.size()];
        this.commitList.setListData(tmp.toArray(list));
    }//GEN-LAST:event_releaseBActionPerformed

    private void goBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackActionPerformed
        // TODO add your handling code here:
        dispose();
        try {
            ArrayList<Project> projects = DbHandler.getProjects();
            if(projects!=null && !projects.isEmpty()){
                dispose();
                new ProjectPicker(projects);
            }
            else 
                new Dialog("no projects found");
        } catch (SQLException ex) {
            Logger.getLogger(ProjectPicker.class.getName()).log(Level.SEVERE, null, ex);
            DbHandler.printSQLException(ex);
            System.err.println("error in getting project");
        }
    }//GEN-LAST:event_goBackActionPerformed

    private void fF2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fF2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fF2ActionPerformed
    
    private void populate() {
        DefaultListModel<Commit> listModel = new DefaultListModel<>();
        try{
            for(Commit c : commits)
                listModel.addElement(c);
            commitList.setModel(listModel);
        }catch(NullPointerException e){
            System.err.println("projects list empty");
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyzeB;
    private javax.swing.JList<Commit> commitList;
    private javax.swing.JTextField fF1;
    private javax.swing.JTextField fF2;
    private javax.swing.JLabel filterB;
    private javax.swing.JButton goBack;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton releaseB;
    // End of variables declaration//GEN-END:variables
}
